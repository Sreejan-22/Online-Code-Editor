{"version":3,"sources":["components/Editor/Editor.js","hooks/useLocalStorage.js","components/App/App.js","index.js"],"names":["Editor","props","value","language","displayName","onChange","useState","isOpen","setOpen","className","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","width","height","sandbox","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTA4Be,SAASA,EAAOC,GAAQ,IAC7BC,EAA2CD,EAA3CC,MAAOC,EAAoCF,EAApCE,SAAUC,EAA0BH,EAA1BG,YAAaC,EAAaJ,EAAbI,SADF,EAGVC,oBAAS,GAHC,mBAG7BC,EAH6B,KAGrBC,EAHqB,KAQpC,OACE,oCACE,yBAAKC,UAAS,2BAAsBF,EAAS,GAAK,cAChD,yBAAKE,UAAU,gBACZL,EACD,4BACEM,QAAS,kBAAMF,GAAQ,SAACG,GAAD,OAAeA,MACtCF,UAAU,uBAEV,kBAAC,IAAD,CAAiBG,KAAML,EAASM,IAAgBC,QAIpD,kBAAC,aAAD,CACEC,eAjBR,SAAsBC,EAAQC,EAAMf,GAClCG,EAASH,IAiBHA,MAAOA,EACPO,UAAU,sBACVS,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMlB,EACNmB,MAAO,WACPC,aAAa,O,MCpDV,SAASC,EAAgBC,EAAKC,GAE3C,IAAMC,EANO,eAMgBF,EAF4B,EAG/BnB,oBAAS,WACjC,IAAMsB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EACKG,KAAKC,MAAMJ,GAGQ,oBAAjBF,EACFA,IAEAA,KAZ8C,mBAGlDxB,EAHkD,KAG3C+B,EAH2C,KAoBzD,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUlC,MAChD,CAACyB,EAAazB,IAEV,CAACA,EAAO+B,GCyCFI,MA9Df,WAAe,MAKWb,EAAgB,OAAQ,IALnC,mBAKNc,EALM,KAKAC,EALA,OAMSf,EAAgB,MAAO,IANhC,mBAMNgB,EANM,KAMDC,EANC,OAOOjB,EAAgB,KAAM,IAP7B,mBAONkB,EAPM,KAOFC,EAPE,OASerC,mBAAS,IATxB,mBASNsC,EATM,KASEC,EATF,KAuBb,OAZAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,iBAAD,OACDP,EADC,iCAEAE,EAFA,mCAGCE,EAHD,uBAKR,KAEH,OAAO,kBAAMM,aAAaF,MACzB,CAACR,EAAME,EAAKE,IAGb,oCACE,yBAAKjC,UAAU,iBAEb,kBAACT,EAAD,CACES,UAAU,cACVL,YAAY,OACZD,SAAS,MACTD,MAAOoC,EACPjC,SAAUkC,IAEZ,kBAACvC,EAAD,CACES,UAAU,aACVL,YAAY,MACZD,SAAS,MACTD,MAAOsC,EACPnC,SAAUoC,IAEZ,kBAACzC,EAAD,CACES,UAAU,YACVL,YAAY,aACZD,SAAS,aACTD,MAAOwC,EACPrC,SAAUsC,KAGd,yBAAKlC,UAAU,qBACb,4BACEmC,OAAQA,EACRK,MAAM,SACNC,MAAM,OACNC,OAAO,OACPC,QAAQ,qBCvDlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7ff3a3ce.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// main css for editor\r\nimport \"codemirror/lib/codemirror.css\";\r\n// theme css for editor\r\nimport \"codemirror/theme/material.css\";\r\n\r\n// languages to be used in the editor\r\n\r\n// html\r\nimport \"codemirror/mode/xml/xml\";\r\n// javascript\r\nimport \"codemirror/mode/javascript/javascript\";\r\n// css\r\nimport \"codemirror/mode/css/css\";\r\n\r\n// import the editor module\r\n// this a controlled editor which means we can control through our own eventhandlers and values\r\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\r\n\r\n// import fontawesome icons\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// note\r\n// we need to store the code written in the code editor, otherwise it gets removed when the page is refreshed\r\n// we will use localStorage for this purpose\r\n\r\nexport default function Editor(props) {\r\n  const { value, language, displayName, onChange } = props;\r\n\r\n  const [isOpen, setOpen] = useState(true);\r\n\r\n  function handleChange(editor, data, value) {\r\n    onChange(value);\r\n  }\r\n  return (\r\n    <>\r\n      <div className={`editor-container ${isOpen ? \"\" : \"collapsed\"}`}>\r\n        <div className=\"editor-title\">\r\n          {displayName}\r\n          <button\r\n            onClick={() => setOpen((prevOpen) => !prevOpen)}\r\n            className=\"expand-collapse-btn\"\r\n          >\r\n            <FontAwesomeIcon icon={isOpen ? faCompressAlt : faExpandAlt} />\r\n          </button>\r\n        </div>\r\n        {/* value attribute contains the code that we are going to write on the editor */}\r\n        <ControlledEditor\r\n          onBeforeChange={handleChange}\r\n          value={value}\r\n          className=\"code-mirror-wrapper\"\r\n          options={{\r\n            lineWrapping: true,\r\n            lint: true,\r\n            mode: language,\r\n            theme: \"material\",\r\n            lineNumbers: true,\r\n          }}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst PREFIX = \"code-editor-\";\r\n// the PREFIX variable allows us to identify the localStorage variables corresponding to our application as\r\n// there might be many such variables\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  // key identifies the editor - html, css or js\r\n  const prefixedKey = PREFIX + key;\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey);\r\n    if (jsonValue != null) {\r\n      return JSON.parse(jsonValue);\r\n    }\r\n\r\n    if (typeof initialValue === \"function\") {\r\n      return initialValue();\r\n    } else {\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\r\n  }, [prefixedKey, value]);\r\n\r\n  return [value, setValue];\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Editor from \"../Editor/Editor\";\r\nimport \"./App.css\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\n\r\nfunction App() {\r\n  // const [html, setHtml] = useState(\"\");\r\n  // const [css, setCss] = useState(\"\");\r\n  // const [js, setJs] = useState(\"\");\r\n\r\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\r\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\r\n  const [js, setJs] = useLocalStorage(\"js\", \"\");\r\n\r\n  const [srcDoc, setSrcDoc] = useState(``);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setSrcDoc(`\r\n      <html>${html}</html>\r\n      <style>${css}</style>\r\n      <script>${js}</script>\r\n    `);\r\n    }, 250);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [html, css, js]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"pane top-pane\">\r\n        {/* for html editor we need to specify the language as xml(rule of codemirror) */}\r\n        <Editor\r\n          className=\"html-editor\"\r\n          displayName=\"HTML\"\r\n          language=\"xml\"\r\n          value={html}\r\n          onChange={setHtml}\r\n        />\r\n        <Editor\r\n          className=\"css-editor\"\r\n          displayName=\"CSS\"\r\n          language=\"css\"\r\n          value={css}\r\n          onChange={setCss}\r\n        />\r\n        <Editor\r\n          className=\"js-editor\"\r\n          displayName=\"Javascript\"\r\n          language=\"javascript\"\r\n          value={js}\r\n          onChange={setJs}\r\n        />\r\n      </div>\r\n      <div className=\"pane botttom-pane\">\r\n        <iframe\r\n          srcDoc={srcDoc}\r\n          title=\"output\"\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          sandbox=\"allow-scripts\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}